<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">0</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GUI login">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import java.io.File;
import java.time.Duration;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.apache.commons.io.FileUtils;
import org.apache.jmeter.samplers.SampleResult;




// Set the path to the ChromeDriver executable


// Initialize ChromeOptions
ChromeOptions options = new ChromeOptions();
options.addArguments(&quot;--headless&quot;);    //comment out this part to see browser
options.addArguments(&quot;--window-size=1024,1080&quot;); //comment out this part to see browser



// Initialize WebDriver
WebDriver driver = new ChromeDriver(options);
SampleResult result = new SampleResult();

try {
    // Start the transaction
    var threadId = Thread.currentThread().getId();
    

    // Navigate to the URL

    String Url = ENTER YOUR URL HERE WITH IN DOUBLE QUOTES;
    	
    if (!Url.endsWith(&quot;/home&quot;)) {
    Url += &quot;/home&quot;
    }
    driver.get(Url);
    
    WebDriverWait wait = new WebDriverWait(driver,Duration.ofSeconds(30));

    // Click the login menu
    var loginLink = wait.until(ExpectedConditions.elementToBeClickable(By.linkText(&quot;Login&quot;)));
    File screenshotFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
    // Specify the path to save the screenshot
    String screenshotPath = &quot;Login/Pictures/${username}login&quot;+threadId+&quot;.png&quot;;
    FileUtils.copyFile(screenshotFile, new File(screenshotPath));
    loginLink.click();

    

    // Wait for the login form to appear
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(&quot;user_name&quot;)));

    // Enter username and password
    var usernameField = driver.findElement(By.name(&quot;user_name&quot;));
    usernameField.sendKeys(&quot;${username}&quot;);

    var passwordField = driver.findElement(By.name(&quot;password&quot;));
    passwordField.sendKeys(&quot;${password}&quot;);

    // Submit the form
    var loginButton = driver.findElement(By.id(&quot;default-login-button&quot;));
    loginButton.click();
     File screenshotFile2 = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
    // Specify the path to save the screenshot
    String screenshotPath2 = &quot;Login/Pictures/${username}afterlogin&quot;+threadId+&quot;.png&quot;;
    FileUtils.copyFile(screenshotFile2, new File(screenshotPath2));

    wait.until(ExpectedConditions.urlContains(&quot;/home&quot;));
   

    
    

} catch (Exception e) {
   log.error(&quot;Request stuck &quot; + e.getMessage());
   result.setSuccessful(false);
   result.setResponseMessage(&quot;Request stuck &quot; + e.getMessage()+&quot;~~~~~~~~~~ RETRY TEST RUN ~~~~~~~~~~~&quot;);
   result.setResponseCode(&quot;500&quot;); // Set a response code for the failure

} finally {
    // End the transaction
 

    // Close the browser
    driver.quit();
}

   </stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">ENTER YOUR CSV FILE PATH HERE</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">name,username,password</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
